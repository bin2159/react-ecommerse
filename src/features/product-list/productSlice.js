import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import {
  createProduct,
  fetchAllProducts,
  fetchAllProductsByFilter,
  fetchBrands,
  fetchCategories,
  fetchCategory,
  fetchProductById,
  updateProduct,
} from './productAPI'

const initialState = {
  products: [],
  brands: [],
  categories: [],
  status: 'idle',
  totalItems: 0,
  selectedProduct: null,
}

export const fetchAllProductsAsync = createAsyncThunk(
  'product/fetchAllProducts',
  async () => {
    const response = await fetchAllProducts()
    // The value we return becomes the `fulfilled` action payload
    return response.data
  }
)

export const fetchProductByIdAsync = createAsyncThunk(
  'product/fetchProductById',
  async (id) => {
    const response = await fetchProductById(id)
    // The value we return becomes the `fulfilled` action payload
    return response.data
  }
)

export const createProductAsync = createAsyncThunk(
  'product/createProduct',
  async (product) => {
    const response = await createProduct(product)
    return response.data
  }
)

export const updateProductAsync = createAsyncThunk(
  'product/updateProduct',
  async (product) => {
    const response = await updateProduct(product)
    return response.data
  }
)

export const fetchAllProductsByFilterAsync = createAsyncThunk(
  'product/fetchAllProductsByFilterAsync',
  async ({ filter, sort, pagination }) => {
    const response = await fetchAllProductsByFilter({
      filter,
      sort,
      pagination,
    })
    // The value we return becomes the `fulfilled` action payload
    return response.data
  }
)
export const fetchBrandsAsync = createAsyncThunk(
  'product/fetchBrands',
  async () => {
    const response = await fetchBrands()
    // The value we return becomes the `fulfilled` action payload
    return response.data
  }
)
export const fetchCategoriesAsync = createAsyncThunk(
  'product/fetchCategories',
  async () => {
    const response = await fetchCategories()
    // The value we return becomes the `fulfilled` action payload
    return response.data
  }
)
export const productSlice = createSlice({
  name: 'product',
  initialState,
  reducers: {
   clearSelectedProduct:(state)=>{
    state.selectedProduct=null
   }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllProductsAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(fetchAllProductsAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.products = action.payload
      })
      .addCase(fetchAllProductsByFilterAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(fetchAllProductsByFilterAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.products = action.payload.products
        state.totalItems = action.payload.totalItems
      })
      .addCase(fetchBrandsAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(fetchBrandsAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.brands = action.payload
      })
      .addCase(fetchCategoriesAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(fetchCategoriesAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.categories = action.payload
      })
      .addCase(fetchProductByIdAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(fetchProductByIdAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.selectedProduct = action.payload
      })
      .addCase(createProductAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(createProductAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.products.push(action.payload)
      })
      .addCase(updateProductAsync.pending,(state)=>{
        state.status='pending'
      })
      .addCase(updateProductAsync.fulfilled,(state,action)=>{
        state.status='idle'
        const index=state.products.findIndex(product=>product.id===action.payload.id)
        state.products[index]=action.payload
      })
  },
})

export const { clearSelectedProduct} = productSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectAllProduct = (state) => state.product.products
export const selectTotalItems = (state) => state.product.totalItems
export const selectCategories = (state) => state.product.categories
export const selectBrands = (state) => state.product.brands
export const selectProductById = (state) => state.product.selectedProduct
export default productSlice.reducer
