import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { createOrder, fetchAllOrders, updateOrder } from './orderAPI'

const initialState = {
  orders: [],
  status: 'idle',
  currentOrder: null,
  totalOrders: 0,
}

export const createOrderAsync = createAsyncThunk(
  'orders/createOrder',
  async (order) => {
    const response = await createOrder(order)
    return response.data
  }
)

export const fetchAllOrdersAsync = createAsyncThunk(
  'orders/fetchAllOrders',
  async ({sort,pagination}) => {
    const response = await fetchAllOrders({sort,pagination})
    return response.data
  }
)

export const updateOrderAsync = createAsyncThunk(
  'orders/updateOrders',
  async (order) => {
    const response = await updateOrder(order)
    return response.data
  }
)

export const orderSlice = createSlice({
  name: 'order',
  initialState,
  reducers: {
    increment: (state) => {
      state.value += 1
    },
    resetCurrentOrder: (state, action) => {
      state.currentOrder = null
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createOrderAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(createOrderAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.orders.push(action.payload)
        state.currentOrder = action.payload
      })
      .addCase(fetchAllOrdersAsync.pending, (state) => {
        state.status = 'pending'
      })
      .addCase(fetchAllOrdersAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.orders = action.payload.orders
        state.totalOrders = action.payload.totalOrders
      })
      .addCase(updateOrderAsync.pending,(state)=>{
        state.status='pending'
      })
      .addCase(updateOrderAsync.fulfilled,(state,action)=>{
        state.status='idle'
        const index=state.orders.findIndex(order=>order.id===action.payload.id)
        state.orders[index]=action.payload
      })
  },
})

export const { resetCurrentOrder } = orderSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.order.value)`
export const selectCurrentOrder = (state) => state.order.currentOrder
export const selectAllOrders = (state) => state.order.orders
export const selectTotalOrders = (state) => state.order.totalOrders

export const selectOrder = (state) => state.order.orders

export default orderSlice.reducer
